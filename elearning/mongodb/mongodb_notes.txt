This commands are taken from the MongoDB university training course for developers
----------------------------------------------------------------------------------

Add Test data:
> for (i=0; i<1000; i++) { names=["exam", "essay", "quiz"]; for (j=0;j<3;j++) {db.scores.insert( { "student" : i, "type" : names[j], score : Math.round(Math.random()*100) } ); } }

db.scores.find( { $or : [ {"score" : { $lt : 50 }}, {"score" : { $gt : 90 }} ] } );
db.users.find( { "name" : { $regex : "q" }, "email" : { $exists : true } } );
db.scores.find({ "type" : "essay", "score" : 50} , { "_id" : false, "student" : true});
db.users.find( { friends : { $all : [ "Joe" , "Bob" ] }, favorites : { $in : [ "running" , "pickles" ] } };
db.catalog.find( { price : { $gt : 10000 } , "reviews.rating" : { $gte : 5 } } );
db.scores.find({type : "exam"}).sort({ score : -1 }).skip(50).limit(20);
db.scores.count( { type : "essay", score : { $gt : 90 } } );
db.people.update( { name: "Alice" }, {$set : { age : 31} } );
db.people.update( { name: "Alice" }, {$unset : { age : 1} } );

Manipulating arrays:
-------------------------------------------------------------------
petervdb@uxplcomp726:~> mongo
MongoDB shell version: 2.4.10
connecting to: test
> db.arrays.insert( {_id : 0, a : [1, 2, 3, 4 ] } );
> db.arrays.find();
{ "_id" : 0, "a" : [  1,  2,  3,  4 ] }

# Update value within an array
> db.arrays.update( { _id : 0 }, { $set : { "a.2" : 5 } } )
> db.arrays.find();
{ "_id" : 0, "a" : [  1,  2,  5,  4 ] }

# Add element from the array
> db.arrays.update( { _id : 0 }, { $push : { a : 6 } } )
> db.arrays.find();
{ "_id" : 0, "a" : [  1,  2,  5,  4,  6 ] }

# Remove element from the array
> db.arrays.update( { _id : 0 }, { $pop : { a : 6 } } )
> db.arrays.find();
{ "_id" : 0, "a" : [  1,  2,  5,  4 ] }

# Remove left element of the array
> db.arrays.update( { _id : 0 }, { $pop : { a : -1 } } )
> db.arrays.find();
{ "_id" : 0, "a" : [  2,  5,  4 ] }

# Remove the right element of the array
> db.arrays.update( { _id : 0 }, { $pop : { a : 1 } } )
> db.arrays.find();
{ "_id" : 0, "a" : [  2,  5 ] }

# Add multiple elements to the array, can generate duplicates
> db.arrays.update( { _id : 0 }, { $pushAll : { a : [7, 8, 9 ] } } )
> db.arrays.find();
{ "_id" : 0, "a" : [  2,  5,  7,  8,  9 ] }

# Remove the value of the element in the array
> db.arrays.update( { _id : 0 }, { $pull : { a : 5 } } )
> db.arrays.find();
{ "_id" : 0, "a" : [  2,  7,  8,  9 ] }

# Remove multiple values of elements in the array
> db.arrays.update( { _id : 0 }, { $pullAll : { a : [2, 4, 8 ] } } )
> db.arrays.find();
{ "_id" : 0, "a" : [  7,  9 ] }

# Add elements and prevents generating duplicates
> db.arrays.update( { _id : 0 }, { $addToSet : { a : 5 } } );
> db.arrays.find();
{ "_id" : 0, "a" : [  7,  9,  5 ] }
> db.arrays.update( { _id : 0 }, { $addToSet : { a : 5 } } );
> db.arrays.find();
{ "_id" : 0, "a" : [  7,  9,  5 ] }

# Update a record and if it does not exists, insert it
db.foo.update( { username : 'bar' }, { '$set' : { 'interests': [ 'cat' , 'dog' ] } } , { upsert : true } );

# Update multiple documents at the  same
db.people.update( { } , { $set : {title : "Dr" } } , {multi : true } )
db.scores.update( { score : { $lt : 70 } } , { $inc : { score : 20 } }, {multi : true} );

# remove documents
db.people.remove( { } )
db.people.drop()
db.people.remove( { name : "Alice" } )

--------------------------------------------------------------------------
Homework 2.1
----------------
> db.grades.find({ score : { $gte : 65 }}).sort({score : 1}).pretty()
{
	"_id" : ObjectId("50906d7fa3c412bb040eb5cf"),
	"student_id" : 22,
	"type" : "exam",
	"score" : 65.02518811936324
}
...

Homework 2.2
----------------
Filter by homework and sort by score
> db.grades.find ({ type : "homework"}).sort( {student_id : 1, score : 1 })
{ "_id" : ObjectId("50906d7fa3c412bb040eb579"), "student_id" : 0, "type" : "homework", "score" : 14.8504576811645 }
{ "_id" : ObjectId("50906d7fa3c412bb040eb57a"), "student_id" : 0, "type" : "homework", "score" : 63.98402553675503 }
{ "_id" : ObjectId("50906d7fa3c412bb040eb57d"), "student_id" : 1, "type" : "homework", "score" : 21.33260810416115 }
{ "_id" : ObjectId("50906d7fa3c412bb040eb57e"), "student_id" : 1, "type" : "homework", "score" : 44.31667452616328 }
...

When student_id changes the element can be removed.
There are 200 student, and 4 elements for each student. After processing only 600 elements should be in the collection.

Homework 2.3
-----------------

Homework 3.1
-----------------
> db.students.update({ "_id" : 0}, { $set : { "scores" : [ { "type" : "exam", "score" : 1.463179736705023 }, { "type" :
"quiz", "score" : 11.78273309957772 }, { "type" : "homework", "score" : 6.676176060654615 }, { "type" : "homework", "sco
re" : 35.8740349954354 } ] } })
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 0 })
>
>
> db.students.find({ _id : 0}).pretty()
{
        "_id" : 0,
        "scores" : [
                {
                        "type" : "exam",
                        "score" : 1.463179736705023
                },
                {
                        "type" : "quiz",
                        "score" : 11.78273309957772
                },
                {
                        "type" : "homework",
                        "score" : 6.676176060654615
                },
                {
                        "type" : "homework",
                        "score" : 35.8740349954354
                }
        ]
}
> db.students.update({ "_id" : 0}, { $set : { "scores" : [ { "type" : "exam", "score" : 1.463179736705023 }, { "type" :
"quiz", "score" : 11.78273309957772 }, { "type" : "homework", "score" : 35.8740349954354 } ] } })
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.students.find({ _id : 0}).pretty()
{
        "_id" : 0,
        "scores" : [
                {
                        "type" : "exam",
                        "score" : 1.463179736705023
                },
                {
                        "type" : "quiz",
                        "score" : 11.78273309957772
                },
                {
                        "type" : "homework",
                        "score" : 35.8740349954354
                }
        ]
}

Homework 3.2 and 3.3
-----------------------
self.posts.insert(post, safe=True)
cursor = self.posts.find( {} )
post = self.posts.find_one({'permalink': permalink})
self.posts.update({'permalink': permalink}, { '$set' : { 'comments': [ comment ] } } )

Indexes
-----------------------
Create index ascending
db.students.ensureIndex({student_id:1})
Index class descending
db.students.ensureIndex({student_id:1,class: -1})
Create index on class and student_name
db.students.ensureIndex({class:1, student_name:1})
Find out indexes that have been created:
db.system.indexes.find()
> db.system.indexes.find()
{ "v" : 1, "key" : { "_id" : 1 }, "name" : "_id_", "ns" : "school.students" }
> db.students.getIndexes()
[
        {
                "v" : 1,
                "key" : {
                        "_id" : 1
                },
                "name" : "_id_",
                "ns" : "school.students"
        }
]
MultiKey indexes
-----------------------
MultiKey index is not possible when both field are array.
db.foo.ensureIndex({a:1, b:1})
Not possible: db.foo.insert({a:[1,2,3], b:[5,6,7]})

db.people.ensureIndex({'addresses.tag':1})

Create unique index
db.stuff.ensureIndex( { thing : 1}, {unique : true })
db.students.ensureIndex({student_id: 1, class_id: 1}, {unique: true})
Danger zone:
db.things.ensureIndex ( { thing : 1}, {unique : true , dropDups : true } )

Sparse index: different behaviour between 2.4 and 2.6
db.products.ensureIndex({size : 1}, {unique: true, sparse: true})

Index size
-----------------------
> db.students.stats()
{
        "ns" : "school.students",
        "count" : 200,
        "size" : 48000,
        "avgObjSize" : 240,
        "numExtents" : 3,
        "storageSize" : 172032,
        "nindexes" : 1,
        "lastExtentSize" : 131072,
        "paddingFactor" : 1,
        "userFlags" : 1,
        "totalIndexSize" : 8176,
        "indexSizes" : {
                "_id_" : 8176
        },
        "ok" : 1
}
> db.students.totalIndexSize()
8176

This is about 8k bytes of memory used.
If possible, all indexes should be stored in memory for best performance.

2D location index
-----------------------
db.stores.ensureIndex({location:'2d', type: 1})
db.stores.find({location:{$near:[50,50]}})
db.places.find( { location : { $near : [74,140] } } ).limit(3)

2D sphere location index
-----------------------
db.stores.ensureIndex({location:'2dsphere'})
db.places.find({ location: { $near : { $geometry: { type: "Point", coordinates : [-122, 37]}, $maxDistance: 2000 } } })
db.stores.find( { loc: { $near : { $geometry : { type : "Point", coordinates : [-130, 39]}, $maxDistance : 1000000 } } } )

Text searches
-----------------------
db.sentences.ensureIndex({ 'words' : 'text' })
db.sentences.find({{$text : { $search: 'dog'}})
db.sentences.find({$text:{$search:'dog tree obsidian'}}, {score:{$meta: 'textScore'}}).sort({score:{$meta:'textScore'}})

Slow query logging
-----------------------
By default all queries > 100ms are logged in de log file

Profiler
-----------------------
0 off
1 slow querues
2 all queries

db.system.profile.find({ns:/test.foo/}).sort({ts:1}).pretty()
db.system.profile.find({ns:/school.students/}).sort({ts:1}).pretty()
db.getProfilingLevel()
db.getProfilingStatus()
db.setProfilingStatus(1,4) # Level 1, 4 ms 
db.setProfilingLevel(0) # Level 1, 4 ms 
db.system.profile.find({millis:{$gt:1000}}).sort({ts:-1}) # all queries > 1000 ms



